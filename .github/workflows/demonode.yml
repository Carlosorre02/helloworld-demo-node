name: demonode1

on:
  workflow_dispatch

env:
  REGISTRY: docker.io
  IMAGE_NAME: carlo02sorre/demonode

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@6e04d228eb30da1757ee4e1dd75a0ec73a653e06 #v3.1.1
        with:
          cosign-release: 'v2.1.1'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.0.0

      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.DEMO_NODE }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5.0.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5.0.0
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Discovery and Use Base Image
        id: get_base_image
        run: |
          NODE_VERSION=$(grep "^ARG NODE_VERSION" Dockerfile | cut -d'=' -f2)
          BASE_IMAGE=$(grep "^FROM" Dockerfile | sed "s/\${NODE_VERSION}/$NODE_VERSION/" | cut -d' ' -f2)
          echo "Base image used: $BASE_IMAGE"
          echo "BASE_IMAGE=$BASE_IMAGE" >> $GITHUB_ENV

      - name: Install Node.js and Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y nodejs npm

      - name: Run index.js to Fetch Newer Versions
        run: |
          node index.js

      - name: Run Trivy on First 5 Base Image Versions
        run: |
          TAGS=$(node index.js | tail -n 5)
          for TAG in $TAGS; do
            echo "Running Trivy on $TAG"
            docker pull $TAG
            docker run --rm -v $(pwd):/root/.cache/ aquasec/trivy image --format json --output ${TAG}-trivy-report.json $TAG
          done

      - name: Upload Trivy Reports
        uses: actions/upload-artifact@v4
        with:
          name: trivy-reports
          path: '*.json'

      - name: Parse Trivy Reports
        uses: Carlosorre02/project-action@main
        with:
          trivy-report: '*.json'
